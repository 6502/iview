#!/usr/bin/python
import sys, gc, os, time, math, re
from PyQt4.Qt import *

QW = QWidget

class Viewer(QW):
    def __init__(self, parent, imglist):
        QW.__init__(self, parent)

        bg = QImage(32, 32, QImage.Format_ARGB32)
        dc = QPainter(bg)
        dc.fillRect(0, 0, 32, 32, QColor(96, 96, 96))
        dc.fillRect(0, 0, 16, 16, QColor(128, 128, 128))
        dc.fillRect(16, 16, 16, 16, QColor(128, 128, 128))
        dc = None
        self.bbrush = QBrush(bg)

        self.setFocusPolicy(Qt.StrongFocus)
        self.setFocus()
        self.imglist = imglist[:]
        self.setMouseTracking(True)
        self.fullscreen = False
        self.timer = QTimer(self)
        self.connect(self.timer, SIGNAL("timeout()"), self.checkmtime)
        self.timer.start(250)
        self.pos = None
        self.tracking = None
        self.tools = []
        self.load(0)

    def load(self, index):
        self.imglist[:] = self.imglist[index:] + self.imglist[:index]
        self.img = QImage(self.imglist[0])
        self.scaled = None
        self.imgmtime = os.stat(self.imglist[0]).st_mtime
        self.setTitle()
        self.update()
        gc.collect()

    def checkmtime(self):
        imgmtime = os.stat(self.imglist[0]).st_mtime
        if imgmtime != self.imgmtime:
            self.load(0)

    def resizeEvent(self, e):
        self.zoomAll()
        QW.resizeEvent(self, e)

    def zoomAll(self):
        self.scale = min(float(self.width()) / max(1, self.img.width()),
                         float(self.height()) / max(1, self.img.height()))
        self.tx = (self.width() - self.img.width()*self.scale) / 2
        self.ty = (self.height() - self.img.height()*self.scale) / 2
        self.update()

    def keyPressEvent(self, e):
        for t in self.tools:
            if t.key(e):
                self.update()
                return
        if e.key() == Qt.Key_Right:
            w, h = self.img.width(), self.img.height()
            self.load(1)
            if (w, h) != (self.img.width(), self.img.height()):
                self.zoomAll()
        elif e.key() == Qt.Key_Left:
            w, h = self.img.width(), self.img.height()
            self.load(len(self.imglist) - 1)
            if (w, h) != (self.img.width(), self.img.height()):
                self.zoomAll()
        elif e.key() == Qt.Key_1:
            self.setZoom(1)
        elif e.key() == Qt.Key_2:
            self.setZoom(2)
        elif e.key() == Qt.Key_3:
            self.setZoom(3)
        elif e.key() == Qt.Key_4:
            self.setZoom(4)
        elif e.key() in (Qt.Key_Home, Qt.Key_0):
            self.zoomAll()
        elif e.key() in (Qt.Key_Escape, Qt.Key_Q):
            self.parent().deleteLater()
        elif e.key() == Qt.Key_F:
            self.fullscreen = not self.fullscreen
            if self.fullscreen:
                self.parent().showFullScreen()
            else:
                self.parent().showNormal()
        elif e.key() == Qt.Key_R:
            img = QImage(self.img.height(), self.img.width(), QImage.Format_ARGB32)
            img.fill(0)
            dc = QPainter(img)
            dc.rotate(90)
            dc.drawImage(0, -self.img.height(), self.img)
            dc = None
            self.img = img
            self.zoomAll()
            gc.collect()
        elif e.key() == Qt.Key_C:
            self.tools = [CropTool(self)]
            self.update()
        elif e.key() == Qt.Key_S:
            fname = str(QFileDialog.getSaveFileName(self, "Save image as", self.imglist[0]))
            if fname != "":
                supported_extensions = [str(x).lower() for x in QImageWriter.supportedImageFormats()]
                if re.match("^.*\\.(" + "|".join(supported_extensions) + ")$", fname):
                    if self.img.save(fname):
                        if fname not in self.imglist:
                            self.imglist.insert(0, fname)
                            self.load(0)
                    else:
                        QMessageBox.critical(self, "IView: Error saving image file",
                                             "There was a problem saving the image file.")
                else:
                    QMessageBox.critical(self, "IView: Unable to save image file",
                                         "The requested image format is not supported, supported extensions are "+
                                         ", ".join(supported_extensions))
        self.update()

    def sizeHint(self):
        return QSize(900, 700)

    def setZoom(self, sf):
        if self.pos:
            mx, my = self.pos[0] * self.scale + self.tx, self.pos[1] * self.scale + self.ty
            self.scale = sf
            self.tx = mx - self.pos[0] * self.scale
            self.ty = my - self.pos[1] * self.scale
        else:
            mx, my = self.width()/2, self.height()/2
            lx, ly = (mx - self.tx)/self.scale, (my - self.ty)/self.scale
            self.scale = sf
            self.tx = mx - lx * self.scale
            self.ty = my - ly * self.scale
        self.update()

    def wheelEvent(self, e):
        self.pos = (e.x() - self.tx) / self.scale, (e.y() - self.ty) / self.scale
        sf = self.scale
        d = int(e.delta() / 120)
        while d > 0:
            sf *= 1.2
            d -= 1
        while d < 0:
            sf /= 1.2
            d += 1
        if sf < 0.01:
            sf = 0.01
        if sf > 10000:
            sf = 10000
        self.setZoom(sf)

    def paintEvent(self, e):
        dc = QPainter(self)
        w, h = self.width(), self.height()
        dc.fillRect(0, 0, w, h, QBrush(QColor(64, 64, 64)))

        dc.fillRect(self.tx+1, self.ty+1, self.img.width()*self.scale-2, self.img.height()*self.scale-2, self.bbrush)
        if self.scale > 1:
            dc.save()
            dc.translate(self.tx, self.ty)
            dc.scale(self.scale, self.scale)
            dc.drawImage(0, 0, self.img)
            dc.restore()
        else:
            if self.scaled is None or self.scaled[0] != self.scale:
                sw = int(self.img.width() * self.scale)
                sh = int(self.img.height() * self.scale)
                simg = self.img.scaled(QSize(sw, sh), Qt.IgnoreAspectRatio, Qt.SmoothTransformation)
                self.scaled = [self.scale, simg]
            dc.drawImage(self.tx, self.ty, self.scaled[1])

        y = 16
        dc.setFont(QFont("sans-serif", 11))

        for t in self.tools:
            t.draw(dc)

    def setTitle(self):
        if self.img.isNull():
            name = self.imglist[0] + " (unable to load as image)"
        else:
            name = self.imglist[0] + " (%i x %i x %ibpp = %0.2f MB)" % (
                self.img.width(),
                self.img.height(),
                self.img.depth(),
                self.img.height() * self.img.bytesPerLine() / (1024.0*1024.0))
        if "/" in name:
            name = name[name.rindex("/")+1:]
        self.parent().setWindowTitle(name)

    def mousePressEvent(self, e):
        self.pos = ((e.x() - self.tx) / self.scale,
                    (e.y() - self.ty) / self.scale)
        for t in self.tools:
            self.tracking = t.hit(e.x(), e.y(), e.button())
            if self.tracking:
                break
        else:
            cur = [e.x(), e.y()]
            def pan(mx, my):
                if mx is not None:
                    self.tx += mx - cur[0]
                    self.ty += my - cur[1]
                    cur[0] = mx
                    cur[1] = my
            self.tracking = pan

    def mouseMoveEvent(self, e):
        self.pos = ((e.x() - self.tx) / self.scale,
                    (e.y() - self.ty) / self.scale)
        if self.tracking:
            self.tracking(e.x(), e.y())
            self.update()

    def mouseReleaseEvent(self, e):
        if self.tracking:
            self.tracking(None, None)
            self.tracking = None

    def map(self, x, y):
        return self.tx + x*self.scale, self.ty + y*self.scale

    def revmap(self, x, y):
        return (x - self.tx)/self.scale, (y - self.ty)/self.scale

class CropTool(object):
    def __init__(self, iview):
        self.iview = iview
        self.geo = [iview.img.width()//4, iview.img.height()//4,
                    iview.img.width()*3//4, iview.img.height()*3//4]

    def draw(self, dc):
        x0, y0, x1, y1 = self.geo
        x0, y0 = map(int, self.iview.map(self.geo[0], self.geo[1]))
        x1, y1 = map(int, self.iview.map(self.geo[2], self.geo[3]))
        if x0 > x1: x0, x1 = x1, x0
        if y0 > y1: y0, y1 = y1, y0

        dark = QBrush(QColor(0, 0, 0, 128))
        w, h = self.iview.width(), self.iview.height()
        if y0 > 0: dc.fillRect(0, 0, w, y0, dark)
        if x0 > 0: dc.fillRect(0, y0, x0, y1-y0, dark)
        if x1 < w: dc.fillRect(x1, y0, w-x1, y1-y0, dark)
        if y1 < h: dc.fillRect(0, y1, w, h-y1, dark)

        dc.setBrush(QBrush())
        dc.setPen(QPen(QColor(0, 0, 0), 4))
        dc.drawRect(QRectF(x0, y0, x1-x0, y1-y0))
        dc.setPen(QPen(QColor(255, 255, 255), 2, Qt.DashLine))
        dc.drawRect(QRectF(x0, y0, x1-x0, y1-y0))
        dc.setPen(QPen(QColor(0, 0, 0)))
        dc.setBrush(QColor(255, 0, 0))
        for x, y in ((x0, y0), (x1, y0), (x0, y1), (x1, y1)):
            dc.drawEllipse(QRectF(x-4, y-4, 8, 8))
        tx = "Cropping rect (%i, %i) - (%i, %i) = %i x %i" % (self.geo[0], self.geo[1],
                                                              self.geo[2], self.geo[3],
                                                              abs(self.geo[2]-self.geo[0]),
                                                              abs(self.geo[3]-self.geo[1]))
        dc.setPen(QPen(QColor(0, 0, 0)))
        dc.drawText(4, 20, tx )
        dc.drawText(7, 20, tx )
        dc.drawText(5, 19, tx )
        dc.drawText(5, 21, tx )
        dc.setPen(QPen(QColor(0, 255, 0)))
        dc.drawText(5, 20, tx )

    def hit(self, mx, my, button):
        if button == Qt.LeftButton:
            x0, y0, x1, y1 = self.geo
            x0, y0 = self.iview.map(self.geo[0], self.geo[1])
            x1, y1 = self.iview.map(self.geo[2], self.geo[3])
            f = 0
            if x0 - 8 <= mx <= x0 + 8: f |= 1
            if y0 - 8 <= my <= y0 + 8: f |= 2
            if x1 - 8 <= mx <= x1 + 8: f |= 4
            if y1 - 8 <= my <= y1 + 8: f |= 8
            if f == 0 and (mx-x0)*(mx-x1)<0 and (my-y0)*(my-y1)<0:
                f = 15
            else:
                if (f & 5) == 5: f ^= 4
                if (f & 10) == 10: f ^= 8

            if f:
                cur = map(int, self.iview.revmap(mx, my))
                def tracking(x, y):
                    if x is not None:
                        x, y = map(int, self.iview.revmap(x, y))
                        dx, dy = x - cur[0], y - cur[1]
                        cur[0], cur[1] = x, y
                        if f & 1: self.geo[0] += dx
                        if f & 2: self.geo[1] += dy
                        if f & 4: self.geo[2] += dx
                        if f & 8: self.geo[3] += dy
                        self.geo[0] = max(0, min(self.geo[0], self.iview.img.width()))
                        self.geo[1] = max(0, min(self.geo[1], self.iview.img.height()))
                        self.geo[2] = max(0, min(self.geo[2], self.iview.img.width()))
                        self.geo[3] = max(0, min(self.geo[3], self.iview.img.height()))
                return tracking

    def key(self, e):
        if e.key() == Qt.Key_Escape:
            self.iview.tools.remove(self)
            return True
        elif e.key() in (Qt.Key_Return, Qt.Key_C):
            x0, y0, x1, y1 = self.geo
            if x0 > x1: x0, x1 = x1, x0
            if y0 > y1: y0, y1 = y1, y0
            x0 = max(0, x0)
            y0 = max(0, y0)
            x1 = min(self.iview.img.width(), x1)
            y1 = min(self.iview.img.height(), y1)
            if x0 < x1 and y0 < y1:
                self.iview.img = self.iview.img.copy(x0, y0, x1-x0, y1-y0)
                self.iview.scaled = None
                self.iview.tools.remove(self)
                self.iview.zoomAll()
                return True

class MyDialog(QDialog):
    def __init__(self, parent, imglist):
        QDialog.__init__(self, parent, Qt.Window)
        self.ws = Viewer(self, imglist)
        L = QVBoxLayout(self)
        L.setContentsMargins(0, 0, 0, 0)
        L.addWidget(self.ws)
        self.setModal(True)
        self.show()

if len(sys.argv) == 1:
    print "Missing image file name(s)"
    sys.exit(1)

def smartSort(s):
    return tuple(int(x) if x[0] in "0123456789" else x
                 for x in re.findall("[0-9]+|[^0-9]+", s.upper()))

app = QApplication([])
filelist = sys.argv[1:]
if len(filelist) == 1:
    slash = filelist[0].rindex("/") if "/" in filelist[0] else -1
    fl = []
    supported_extensions = [str(x).lower() for x in QImageReader.supportedImageFormats()]
    fre = re.compile("^.*\\.(" + "|".join(supported_extensions) + ")$")
    for f in os.listdir(filelist[0][:slash+1] + "."):
        if fre.match(f):
            fl.append(filelist[0][:slash+1] + f)
    fl.sort(key = smartSort)
    if filelist[0] in fl:
        i = fl.index(filelist[0])
        filelist = fl if i == 0 else fl[i:] + fl[:i]
aa = MyDialog(None, filelist)
aa.exec_()
aa = None
